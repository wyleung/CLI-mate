{%- macro getNameOrArgs(p) -%}    
    {%- if p.arg and p.arg_long -%}'{{p.arg}}', '{{p.arg_long}}', dest=
    {%- elif p.arg -%}'{{p.arg}}', dest=
    {%- elif p.arg_long -%}'{{p.arg_long}}', dest=
    {%- endif -%}'{{p.name}}'
{%- endmacro -%}

{%- macro getType(type) -%}
    , type=
    {%- if type == 'integer' -%}int
    {%- elif type in ['None', 'boolean'] -%}bool
    {%- elif type in ['string','select'] -%}str
    {%- elif type == 'float' -%}float
    {%- elif type in ['input', 'stdin'] -%}argparse.FileType('r')
    {%- elif type in ['output', 'stdout', 'stderr'] -%}argparse.FileType('w')
    {%- endif -%}
{%- endmacro -%}

{%- macro getOptionalSettings(p) -%}
    {#- default values -#}
    {%- if p.type in ['stdin', 'stdout', 'stderr'] -%}, default=sys.{{p.type}}, nargs='?'
    {%- elif p.type == 'None' -%}, nargs='?', default=False, const=True
    {%- elif p.value -%}, default=
        {%- if p.type == 'string' -%}'{{p.value}}'
        {%- elif p.type == 'select' -%}"{{p.value[0]}}", choices={{p.value}}
        {%- else -%}{{p.value}}
        {%- endif -%}
    {%- endif -%}
    
    {#- required -#}
    {%- if p.required == 'True' and (p.arg or p.arg_long) -%}
        , required=True
    {%- endif -%}
    
    {#- repeatable -#}
    {%- if p.repeatable == 'True' -%}
        , nargs='+'
    {%- endif -%}
    
    {#- help -#}
    {%- if p.label or p.description -%}
        , {{("\nhelp='" + (p.label or p.description))|indent(12, true)}}'
    {%- endif -%}
{%- endmacro -%}
#!/usr/bin/python

"""
{{data.name}}:
{{data.description}}

Handle argument parsing for main.py.
Requires Python version >= 2.7.
If you have Python 2.6, you can manually add argparse as a standalone Module.

@requires: sys
@requires" argparse
"""

import sys
import argparse

def parse() :
    """
    Parse the command line, do all necessary checks and return the arguments
    as a dictionary.
    
    Auto generated by:
        CLI-mate {{version}}
        {{time}}

    Based on:
        {{data['meta']['label']}}
        {{data['meta']['time']}}

    @returns: An object with the parsed arguments.
    @rtype: argparse.Namspace
    """
    
    parser = argparse.ArgumentParser(
            prog='{{data.binary}}',
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description='{{data.description}}',
            epilog="""{{data.help}}""")
    
    {% for p in data.parameters -%}
        parser.add_argument({{getNameOrArgs(p)}}{{getType(p.type)}}{{getOptionalSettings(p)}})
    {% endfor %}
    
    arguments = parser.parse_args()
    
    return arguments
#parse

################################################################################
# usage example
#
#def main():
#   arguments = parse()
#   
#   # Your program logic here. 
#   # Use arguments.<arg_name> to access an argument
# 
##def main
#
#if __name__ == "__main__": 
#   main()
################################################################################